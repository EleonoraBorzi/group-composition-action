name: Main Workflow 
on:
    pull_request_target:
env:
    # Only folders descendant to this folder are considered a valid place for student submissions.
    baseFolder: contributions/
    maxGroupSize: 3
    # The maximum number of times the same group is allowed to work together (this includes groups of only a single person).
    maxCollaborationTimes: 2 
    
jobs: 
  extractPayloadData:
        runs-on: ubuntu-latest
        outputs:
            headRepo:    ${{ steps.runScript.outputs.headNm }}
            baseRepo:    ${{ steps.runScript.outputs.baseNm }}
            headRef:     ${{ steps.runScript.outputs.headBr }}
            baseRef:     ${{ steps.runScript.outputs.baseBr }}
            num:         ${{ steps.runScript.outputs.pullNm }}
            filesAdded:  ${{ steps.file_changes.outputs.files_added}}
        steps:
            - id: file_changes
              uses: trilom/file-changes-action@v1.2.3
            - uses: actions/checkout@v2
            - uses: Dovyski/payload-info-action@master
              with:
                filter_push: '.commits[].author'
                filter_pull_request: '.pull_request.commits'
            - name: setup python
              uses: actions/setup-python@v2
              with:
                python-version: 3.8 #install the python needed
            - id: runScript
              run: |
                python getJson.py $GITHUB_EVENT_PATH
  
  headRepo:
    runs-on: ubuntu-latest
    outputs:
        folderName: ${{ steps.runScript2.outputs.folderName }}
        report:     ${{ steps.runScript2.outputs.report }}
        idsMatch:   ${{ steps.runScript2.outputs.idsMatch }}
    needs: extractPayloadData
    steps:
        - name: checkout repo
          uses: actions/checkout@v2
          with:
            repository: ${{needs.extractPayloadData.outputs.headRepo}}
            ref:        ${{needs.extractPayloadData.outputs.headRef}}
        - name: setup python
          uses: actions/setup-python@v2
          with:
            python-version: 3.8 #install the python needed
        - id: runScript2
          run: |
                python3 id_match.py ${{needs.extractPayloadData.outputs.filesAdded}} $baseFolder
        - run: |
            echo "${{steps.runScript2.outputs.report}}"
            echo "${{steps.runScript2.outputs.folderName}}"
            echo "${{steps.runScript2.outputs.idsMatch}}"
        - name: Fail status if ID:s couldn't be validated
          if: ${{ steps.runScript2.outputs.idsMatch == 'false' }}
          run: exit 1
            
  baseRepo:
        runs-on: ubuntu-latest
        needs: [extractPayloadData, headRepo]
        if: ${{ needs.headRepo.outputs.idsMatch == 'true' }}
        outputs:
            report:   ${{ steps.runScript3.outputs.groupValidityReport }}
            validity: ${{ steps.runScript3.outputs.groupValidity }}
        steps:
            - name: checkout repo
              uses: actions/checkout@v2
              with:
                repository: ${{needs.extractPayloadData.outputs.baseRepo}}
                ref:        ${{needs.extractPayloadData.outputs.baseRef}}
            - name: setup python
              uses: actions/setup-python@v2
              with:
                python-version: 3.8 #install the python needed
            - run: |
                (python valid_group.py $baseFolder ${{needs.headRepo.outputs.folderName}} $maxGroupSize $maxCollaborationTimes) | echo
            - name: runScript3
              id: tmp
              #python valid_group.py $baseFolder ${{needs.headRepo.outputs.folderName}} $maxGroupSize $maxCollaborationTimes
              run: |
                jsonOutput=$(python valid_group.py $baseFolder ${{needs.headRepo.outputs.folderName}} $maxGroupSize $maxCollaborationTimes)
                jsonOutput="${jsonOutput//'%'/'%25'}"
                jsonOutput="${jsonOutput//$'\n'/'%0A'}"
                jsonOutput="${jsonOutput//$'\r'/'%0D'}"
                echo "::set-output name=packageJson::$jsonOutput"
            - id: runScript3
              run: |
                report=${{fromJson(steps.tmp.outputs.packageJson).report}}
                report="${report//'%'/'%25'}"
                report="${report//$'\n'/'%0A'}"
                report="${report//$'\r'/'%0D'}"
                echo "::set-output name=groupValidityReport::$report"
                echo "::set-output name=groupValidity::${{fromJson(steps.tmp.outputs.packageJson).validity}}"
                
                
            - run: |
                echo "${{steps.runScript3.outputs.groupValidityReport}}"
                echo "${{steps.runScript3.outputs.groupValidity}}"
            - name: Fail status if group isn't allowed
              if: ${{ steps.runScript3.outputs.groupValidity == 'false' }}
              run: exit 1
                
  postComment:
        runs-on: ubuntu-latest
        needs: [extractPayloadData, headRepo, baseRepo]
        # Comment should always be posted, regardless if previous jobs didn't report success.
        if: always()
        steps:
            - name: Create comment
              uses: peter-evans/create-or-update-comment@v1
              with:
                issue-number: ${{needs.extractPayloadData.outputs.num}}
                body: |
                    ${{needs.headRepo.outputs.report}}
                    ${{needs.baseRepo.outputs.report}}
                reactions: eyes, heart, hooray, laugh
